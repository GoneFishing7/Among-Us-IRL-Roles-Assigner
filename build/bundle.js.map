{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/utils.ts","../../src/components/StarryBackground.svelte","../../src/soundPlayer.ts","../../src/components/basicComponents/Button.svelte","../../src/components/Home.svelte","../../src/components/Instructions.svelte","../../node_modules/svelte/store/index.mjs","../../src/stores.ts","../../src/components/basicComponents/Input.svelte","../../src/components/ColorChooser.svelte","../../src/components/PlayerEditor.svelte","../../src/components/PlayerEditorPage.svelte","../../src/components/Options.svelte","../../src/components/RevealSinglePlayer.svelte","../../src/components/Reveal.svelte","../../src/rolesAssigner.ts","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.7' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export const colors = [\n    \"black\",\n    \"blue\",\n    \"brown\",\n    \"cyan\",\n    \"green\",\n    \"lime\",\n    \"orange\",\n    \"pink\",\n    \"purple\",\n    \"red\",\n    \"white\",\n    \"yellow\",\n];\nexport const randomColor = () => getRandom(colors, 1)[0];\n/**\n * From https://stackoverflow.com/a/19270021/12701172\n *\n * @export\n * @param arr Array to sample\n * @param n Number of elements to take\n * @returns `n` random elements from `arr`\n */\nexport function getRandom(arr, n) {\n    var result = new Array(n), len = arr.length, taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        var x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n}\n/**\n * Adapted from https://stackoverflow.com/a/37980601/12701172\n *\n * @export\n * @returns {number[]} An array of numbers from `start` to `end-1`\n */\nexport function range(start, end) {\n    return ((r, e) => [...Array(e - r + 1).keys()].map((e) => e + r))(start, end);\n}\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import { randomColor } from \"../utils\";\n\n  // Generate stars with random positions\n  let stars: { x: number; y: number; z: number }[] = new Array(100)\n    // Fill with dummy values\n    .fill({ x: 0, y: 0, z: 0 })\n    // Add random values\n    .map((_, i) => {\n      return {\n        x: Math.random() * 200 - 100,\n        y: Math.random() * 100,\n        z: 0.1 + Math.random() * 1,\n      };\n    })\n    // Make sure stars are rendered in the correct order\n    .sort((a, b) => a.z - b.z);\n\n  // Generate \"floaters\" (floating characters)\n  let floaters: {\n    x: number;\n    y: number;\n    z: number;\n    r: number; // Current rotation\n    t: number; // Torque/Rotation Velocity\n    c: string; // Color\n  }[] = new Array(10)\n    // Fill with dummy values\n    .fill({ x: 0, y: 0, z: 0, r: 0, t: 0, c: \"\" })\n    // Add personal dummy values randomly\n    .map(() => {\n      return {\n        x: Math.random() * 200 - 100,\n        y: Math.random() * 100,\n        z: Math.random() * 2 + 0.1,\n        r: Math.random() * 360 - 180,\n        t: Math.random() * 90 - 45,\n        c: randomColor(),\n      };\n    })\n    // Render in the correct order\n    .sort((a, b) => a.z - b.z);\n\n  // Set animation in motion\n  onMount(() => {\n    let frame;\n\n    // Function will run every frame\n    function loop() {\n      // Get current frame\n      frame = requestAnimationFrame(loop);\n\n      // Update stars\n      stars = stars.map((star) => {\n        star.x += 0.6 * star.z;\n        // If past the edge of the screen\n        if (star.x > 120) star.x = -20;\n        return star;\n      });\n      // Update floaters\n      floaters = floaters.map((floater) => {\n        floater.x += 0.2 * floater.z;\n        floater.r += 0.1 * floater.t;\n        // If past the edge\n        if (floater.x > 120) {\n          floater = {\n            ...floater,\n            x: -20,\n            y: Math.random() * 100,\n            r: Math.random() * 360 - 180,\n            t: Math.random() * 90 - 45,\n            c: randomColor(),\n          };\n        }\n        return floater;\n      });\n    }\n\n    loop();\n\n    return () => cancelAnimationFrame(frame);\n  });\n</script>\n\n<style>\n  :global(body) {\n    background-color: black;\n  }\n\n  div.background {\n    position: absolute;\n    left: 0px;\n    top: 0px;\n    z-index: -100;\n    background-color: black;\n    width: 100vw;\n    height: 100vh;\n  }\n\n  span {\n    position: absolute;\n  }\n\n  span.floater {\n    display: block;\n    width: 100px;\n    height: 100px;\n  }\n</style>\n\n<div class=\"background\">\n  <!-- Render Everyting -->\n  <div class=\"stars\">\n    {#each stars as star}\n      <span style=\"left: {star.x}%; top: {star.y}%; transform: scale({star.z})\">\n        <svg width=\"10\" height=\"10\">\n          <circle cx=\"5\" cy=\"5\" r=\"4\" stroke=\"white\" fill=\"white\" />\n        </svg>\n      </span>\n    {/each}\n  </div>\n  <div class=\"floaters\">\n    {#each floaters as floater}\n      <span\n        class=\"floater\"\n        style=\"\n  left: {floater.x}%;\n  top: {floater.y}%;\n  transform: scale({floater.z}) rotate({floater.r}deg);\n  background-image: url(img/players/{floater.c}.png);\n  background-size: contain;\n  \" />\n    {/each}\n  </div>\n</div>\n","export function playSound(sound) {\n    const audio = new Audio(`audio/${sound}.mp3`);\n    audio.play();\n}\n","<script lang=\"ts\">\n  import { playSound } from \"../../soundPlayer\";\n\n  export let small: boolean = false;\n  export let noOutline: boolean = false;\n  export let center: boolean = false;\n  export let bottomRight: boolean = false;\n  export let smallCursive: boolean = false;\n  export let zIndex: number = 0;\n</script>\n\n<style>\n  button {\n    font-family: \"In your face, Joffrey!\", sans-serif;\n    font-size: 74px;\n    background: black;\n    border-radius: 5px;\n    border-width: 3px;\n    border-style: solid;\n    border-color: white;\n    cursor: default;\n    width: fit-content;\n  }\n  button:focus {\n    outline: none;\n    border-color: grey;\n  }\n  button:hover {\n    color: rgb(0, 173, 0);\n    border-color: rgb(0, 173, 0);\n  }\n  button.center {\n    margin: 0 auto;\n  }\n  button.bottom-right {\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n  }\n  button.small {\n    font-size: unset;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n  button.small-cursive {\n    font-size: 32px;\n  }\n  button.small:hover {\n    border-color: white;\n  }\n  button.no-outline {\n    border: none;\n    background-color: transparent;\n  }\n  button.no-outline:hover {\n    color: rgb(0, 173, 0);\n  }\n  button.no-outline:focus {\n    outline: auto;\n  }\n</style>\n\n<button\n  on:click\n  on:mouseenter={() => {\n    playSound('buttonSound');\n  }}\n  class:center\n  class:small\n  class:no-outline={noOutline}\n  class:bottom-right={bottomRight}\n  class:small-cursive={smallCursive}\n  style={`z-index: ${zIndex}`}>\n  <slot />\n</button>\n","<script lang=\"ts\">\n  import Button from \"./basicComponents/Button.svelte\";\n\n  // functions passed as props because I'm lazy\n  export let goToInstructions;\n  export let goToPlayerEditor;\n</script>\n\n<style>\n  img {\n    height: 70px;\n    width: auto;\n  }\n  header {\n    font-size: 96px;\n  }\n</style>\n\n<div>\n  <header>\n    <img src=\"img/Among Us A.png\" alt=\"Among Us Logo\" />mong Us IRL Roles\n    Assigner\n  </header>\n  <div>I know, not the catchiest name</div>\n  <Button on:click={goToInstructions}>Instructions</Button>\n  <Button on:click={goToPlayerEditor}>Play</Button>\n</div>\n","<script lang=\"ts\">\n  import Button from \"./basicComponents/Button.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  function goBackToMain() {\n    dispatch(\"back\");\n  }\n</script>\n\n<style>\n  p {\n    margin: 10px;\n  }\n</style>\n\n<h1>TO USE THIS SITE:</h1>\n<div>\n  <p>1. Go to the main screen (refresh page if needed)</p>\n  <p>2. Press the \"PLAY\" button</p>\n  <p>3. Enter the names of each player in each text box</p>\n  <p>\n    4. Click on the smaller characters beside each text box to toggle their\n    color\n  </p>\n  <p>5. Click \"THEN CONTINUE\".</p>\n  <p>\n    6. Have each person use the computer in the order that you entered their\n    names. Each player will click \"REVEAL ROLE\", and then \"NEXT PLAYER\" once\n    they've memorized their role.\n  </p>\n</div>\n\n<Button on:click={goBackToMain}>Back to Main Screen</Button>\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from \"svelte/store\";\nimport { range } from \"./utils\";\nexport const optionsStore = writable({\n    players: range(0, 6).map((i) => ({ name: \"\", color: i })),\n    gameMode: \"default\",\n});\n","<script lang=\"ts\">\n  export let small: boolean = false;\n  export let value;\n</script>\n\n<style>\n  input {\n    background: black;\n    border-radius: 5px;\n    border-width: 4px;\n    border-style: double;\n    border-color: white;\n    cursor: default;\n  }\n  input:focus {\n    outline: none;\n    border-color: grey;\n  }\n  input:hover {\n    border-color: rgb(0, 173, 0);\n  }\n  input.small {\n    font-size: 32px;\n  }\n</style>\n\n<input bind:value class:small type=\"text\" />\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n  import { colors } from \"../.../../utils\";\n\n  const dispatch = createEventDispatcher();\n\n  // Index of color in array `colors`\n  export let color: number = 0;\n\n  // Tell parent to update color\n  function updateColor() {\n    dispatch(\"updateColor\");\n  }\n</script>\n\n<style>\n  button.color-chooser {\n    height: 42px;\n    width: 42px;\n    border: 1px solid white;\n    border-radius: 5px;\n    background-size: contain;\n    background-color: transparent;\n  }\n  button.color-chooser:hover {\n    cursor: pointer;\n  }\n  button.color-chooser:focus {\n    outline: none;\n    border-color: green;\n  }\n</style>\n\n<button\n  class=\"color-chooser\"\n  style={`background-image: url(img/players/${colors[color]}.png)`}\n  on:click={() => {\n    updateColor();\n  }} />\n","<script lang=\"ts\">\n  import { optionsStore } from \"../stores\";\n  import type { OptionsType } from \"../types/App.types\";\n\n  import Button from \"./basicComponents/Button.svelte\";\n  import Input from \"./basicComponents/Input.svelte\";\n  import ColorChooser from \"./ColorChooser.svelte\";\n  import { colors, range } from \"../utils\";\n\n  function addPlayer() {\n    // Make sure we're not already at the max\n    if ($optionsStore.players.length >= 10) {\n      return;\n    }\n    // Update the options store with a new player\n    optionsStore.update(\n      (old: OptionsType): OptionsType => {\n        return {\n          ...old,\n          players: [...old.players, { name: \"\", color: getUnusedColor() || 0 }],\n        };\n      }\n    );\n  }\n\n  // Remove player at index\n  function removePlayer(playerIndex) {\n    // Make sure we're not at the minimum\n    if ($optionsStore.players.length <= 3) {\n      return;\n    }\n    // Update options store without chosen player\n    optionsStore.update((old: OptionsType) => {\n      return {\n        ...old,\n        players: [\n          ...old.players.slice(0, playerIndex),\n          ...old.players.slice(playerIndex + 1),\n        ],\n      };\n    });\n  }\n\n  // Update player color at index\n  function updatePlayerColor(playerIndex) {\n    optionsStore.update((old: OptionsType) => {\n      return {\n        ...old,\n        players: [\n          ...old.players.slice(0, playerIndex),\n          {\n            ...old.players[playerIndex],\n            color:\n              getAllUnusedColors().length > 2\n                ? getNextUnusedColor(old.players[playerIndex].color)\n                : old.players[playerIndex].color,\n          },\n          ...old.players.slice(playerIndex + 1),\n        ],\n      };\n    });\n  }\n\n  // Get the first unused color\n  function getUnusedColor() {\n    return getAllUnusedColors()?.[0] || 0;\n  }\n\n  // Function to get next unused color after start\n  function getNextUnusedColor(start: number) {\n    // Get the next unused color, starting from `start`\n\n    // First get all unused colors, including the starting number, just to find the index easier\n    const unusedColorsIncludingStart = [...getAllUnusedColors(), start].sort(\n      (a, b) => a - b\n    );\n\n    // Calculate the next unused color\n    let nextUnusedColor =\n      // Take the unused colors, including start, and the one after start,\n      // but wrap it around.\n      unusedColorsIncludingStart[\n        (unusedColorsIncludingStart.indexOf(start) + 1) %\n          (unusedColorsIncludingStart.length - 1)\n      ];\n    return nextUnusedColor;\n  }\n\n  // Function to get ALL unused colors\n  function getAllUnusedColors() {\n    // Go through each number which represents each color, and filter\n    // out the ones which are currently in use.\n    return range(0, colors.length).filter(\n      (c) => !$optionsStore.players.map((player) => player.color).includes(c)\n    );\n  }\n</script>\n\n<style>\n  div.row {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  div.row > :global(*) {\n    margin: 5px;\n  }\n\n  div.col {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n  }\n\n  div.col > :global(*) {\n    margin-top: 4px;\n  }\n</style>\n\n<div class=\"col\">\n  <!-- Add player button -->\n  <Button center smallCursive on:click={addPlayer}>Add Player</Button>\n  <!-- Render a row for each player -->\n  {#each $optionsStore.players as player, i (i)}\n    <div class=\"row\">\n      <!-- Player input -->\n      <Input small bind:value={player.name} />\n      <!-- Color chooser -->\n      <ColorChooser\n        color={player.color}\n        on:updateColor={() => {\n          updatePlayerColor(i);\n        }} />\n      <!-- Remove player button -->\n      <Button\n        on:click={() => {\n          removePlayer(i);\n        }}\n        noOutline\n        smallCursive>\n        X\n      </Button>\n    </div>\n  {/each}\n</div>\n","<script lang=\"ts\">\n  import PlayerEditor from \"./PlayerEditor.svelte\";\n  import Button from \"./basicComponents/Button.svelte\";\n\n  // Submit function, I was too lazy to implement a dispatcher\n  export let submit;\n</script>\n\n<style>\n  div.playerEditorPage > :global(*) {\n    margin-bottom: 10px;\n  }\n</style>\n\n<div class=\"playerEditorPage\">\n  <div>Enter the names of each player here:</div>\n  <PlayerEditor />\n  <Button on:click={submit}>Then continue</Button>\n</div>\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n\n  import StarryBackground from \"./StarryBackground.svelte\";\n  import Home from \"./Home.svelte\";\n  import Instructions from \"./Instructions.svelte\";\n  import PlayerEditorPage from \"./PlayerEditorPage.svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  let optionsScreen: \"general\" | \"instructions\" | \"players\" = \"general\";\n\n  function goToMain() {\n    optionsScreen = \"general\";\n  }\n\n  function goToInstructions() {\n    optionsScreen = \"instructions\";\n  }\n\n  function goToPlayerEditor() {\n    optionsScreen = \"players\";\n  }\n\n  // Submit options and go to reveal\n  function submit() {\n    dispatch(\"submit\");\n  }\n</script>\n\n<style>\n  div.main {\n    text-align: center;\n  }\n</style>\n\n<div class=\"main\">\n  <StarryBackground />\n  {#if optionsScreen === 'general'}\n    <!-- Home Screen -->\n    <Home {goToInstructions} {goToPlayerEditor} />\n  {:else if optionsScreen === 'instructions'}\n    <!-- Instructions -->\n    <Instructions on:back={goToMain} />\n  {:else}\n    <!-- Player Editor -->\n    <PlayerEditorPage {submit} />\n  {/if}\n</div>\n","<script lang=\"ts\">\n  /*\n  z-indexes:\n  1-10: others \n  11: Player\n  12: Shadow mask\n  13: Role and num-impostors, next player button\n  */\n\n  import { createEventDispatcher } from \"svelte\";\n  import { playSound } from \"../soundPlayer\";\n\n  import Button from \"./basicComponents/Button.svelte\";\n  import { colors } from \"../utils\";\n  import type { Player } from \"../types/App.types\";\n\n  export let name: string;\n  export let role: string;\n  export let color: number;\n  export let others: Player[];\n\n  // To be shown if crewmate\n  $: numImpostors = others.filter((o) => o.role === \"impostor\").length;\n\n  // Array of Xs to be used when rendering others\n  const othersXMap = [11, 22, 30, 35, 39];\n\n  const dispatch = createEventDispatcher();\n\n  // Either \"hello\" screen or \"You Are\" screen\n  let currentScreen: \"preReveal\" | \"reveal\" = \"preReveal\";\n\n  // Play reveal sound when currentScreen changes to \"reveal\"\n  $: {\n    if (currentScreen === \"reveal\") {\n      playSound(\"revealSound\");\n    }\n  }\n\n  // Generate CSS for the other, based on color (for correct image) and index (for x position)\n  function generateCSSForOther(color, index) {\n    return index % 2 === 0\n      ? // If even\n        `\n        top: ${50 - (index / 2 + 1)}%; left: ${50 - othersXMap[index / 2]}%; \n        transform: translateX(-50%) translateY(-50%) scale(${\n          1 - (index / 2 + 1) / 8\n        }); \n        background-image: url(img/players/${colors[color]}.png); \n        filter: brightness(${100 - (index / 2 + 1) * 10}%);\n        z-index: ${10 - index};`\n      : // If odd\n        `\n        top: ${50 - (index + 1) / 2}%; left: ${\n          47 + othersXMap[(index + 1) / 2 - 1]\n        }%; \n        transform: translateX(-50%) translateY(-50%) scaleX(-1) scale(${\n          1 - (index / 2 + 1) / 8\n        }); \n        background-image: url(img/players/${colors[color]}.png); \n        filter: brightness(${100 - ((index + 1) / 2 - 1) * 10}%);\n        z-index: ${10 - index};`;\n  }\n\n  function goToReveal() {\n    currentScreen = \"reveal\";\n  }\n\n  function goToNext() {\n    currentScreen = \"preReveal\";\n    dispatch(\"finished\");\n  }\n</script>\n\n<style>\n  div.container {\n    margin: 0px;\n    padding: 0px;\n  }\n\n  div.shadow-mask {\n    position: absolute;\n    z-index: 12;\n    width: 100vw;\n    height: 100vh;\n    background: linear-gradient(\n        to right,\n        rgba(0, 0, 0, 0.8),\n        transparent,\n        rgba(0, 0, 0, 0.8)\n      )\n      no-repeat border-box;\n  }\n\n  div.reveal {\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-direction: column;\n    background: linear-gradient(black 35%, rgb(56, 255, 233), black 65%)\n      no-repeat border-box;\n  }\n\n  div.reveal.impostor {\n    background: linear-gradient(black 40%, rgb(173, 0, 0), black 60%) no-repeat\n      border-box;\n  }\n\n  div.role {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    font-family: \"VCR OSD Mono\";\n    font-size: 124px;\n    z-index: 13;\n  }\n\n  .num-impostors {\n    position: absolute;\n    top: 25%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    font-size: 32px;\n    font-family: \"VCR OSD Mono\", monospace;\n    z-index: 13;\n  }\n\n  .impostor {\n    font-family: \"VCR OSD MONO\";\n    color: red;\n  }\n\n  .crewmate {\n    font-family: \"VCR OSD MONO\";\n    color: #8dfdff;\n  }\n\n  .player {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n\n    z-index: 11;\n\n    background-size: contain;\n    width: 250px;\n    height: 250px;\n  }\n\n  .other {\n    position: absolute;\n    background-size: contain;\n    width: 250px;\n    height: 250px;\n  }\n\n  .name {\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    font-size: 24px;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n</style>\n\n<div class=\"container\">\n  {#if currentScreen === 'preReveal'}\n    <!-- Pre Reveal s\\Screen -->\n    <div>\n      {#if name}Hello, {name}!{:else}Hello!{/if}\n    </div>\n    <Button on:click={goToReveal}>Reveal Role</Button>\n  {:else if currentScreen === 'reveal'}\n    <!-- Reveal Screen -->\n\n    <!-- Shadow mask for the nice spotlight effect -->\n    <div class=\"shadow-mask\" />\n    <!-- General Reveal Stuff, including role, subtitle, player, and others -->\n    <div class=\"reveal {role}\">\n      <!-- Part that says \"Impostor\" or \"Crewmate\" -->\n      <div class=\"role {role}\">\n        <!-- Capitalize first letter -->\n        {role.slice(0, 1).toUpperCase() + role.slice(1)}\n      </div>\n      {#if role !== 'impostor'}\n        <!-- Tell the crewmate the number of impostors -->\n        <div class=\"num-impostors\">\n          There\n          {numImpostors > 1 ? 'are' : 'is'}\n          <span class=\"impostor\">{numImpostors}\n            impostor{numImpostors > 1 ? 's' : ''}</span>\n          among us\n        </div>\n      {/if}\n      <!-- Render the character for the person being revealed to -->\n      <div\n        class=\"player\"\n        style=\"background-image: url(img/players/{colors[color]}.png)\">\n        <span class=\"name\"> {name || 'You'} </span>\n      </div>\n      {#if role !== 'impostor'}\n        <!-- Render everyone else -->\n        {#each others as other, i}\n          <div class=\"other\" style={generateCSSForOther(other.color, i)} />\n        {/each}\n      {:else}\n        <!-- Render other impostor/s -->\n        {#each others.filter((o) => o.role === 'impostor') as imp, i}\n          <div class=\"other\" style={generateCSSForOther(imp.color, i)}>\n            <span class=\"name\">{imp.name || ''}</span>\n          </div>\n        {/each}\n      {/if}\n    </div>\n    <!-- Next player button, z-index of 13 is the ui index -->\n    <Button zIndex={13} bottomRight on:click={goToNext}>Next player</Button>\n  {/if}\n</div>\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n\n  import { assignRoles } from \"../rolesAssigner\";\n  import { optionsStore } from \"../stores\";\n\n  import RevealSinglePlayer from \"./RevealSinglePlayer.svelte\";\n\n  let playersWithRoles = assignRoles($optionsStore.players, \"default\");\n\n  const dispatch = createEventDispatcher();\n\n  // Revealing means in the process of showing people their roles,\n  // postreveal means finished revealing, and loading main menu (usually too fast to see).\n  let mode: \"revealing\" | \"postreveal\" = \"revealing\";\n\n  // Index of player who is currently being shown their role\n  let currentPlayerRevealing = 0;\n\n  $: if (mode === \"postreveal\") {\n    dispatch(\"finished\");\n  }\n</script>\n\n<style>\n  div {\n    height: 100%;\n    text-align: center;\n  }\n  div > * {\n    margin-top: 10px;\n  }\n</style>\n\n<div>\n  {#if mode === 'revealing'}\n    <RevealSinglePlayer\n      {...playersWithRoles[currentPlayerRevealing]}\n      others={playersWithRoles.filter((player) => player.color !== playersWithRoles[currentPlayerRevealing].color)}\n      on:finished={() => {\n        if (currentPlayerRevealing >= playersWithRoles.length - 1) {\n          mode = 'postreveal';\n          return;\n        }\n        currentPlayerRevealing++;\n      }} />\n  {:else}\n    <p>Loading...</p>\n  {/if}\n</div>\n","import { range, getRandom } from \"./utils\";\nexport function assignRoles(players, mode = \"default\") {\n    let defaultRole;\n    let roles;\n    // For now, only default mode will be implemented\n    if (mode === \"default\") {\n        // Consistent with 2 impostor Among Us game\n        const numImposters = players.length >= 7 ? 2 : 1;\n        defaultRole = \"crewmate\";\n        // Roles is in form {[rolename]: [indexes]}\n        roles = {\n            impostor: getRandom(range(0, players.length - 1), numImposters),\n        };\n        return players.map((player, index) => {\n            var _a, _b;\n            return Object.assign(Object.assign({}, player), { role: \n                // For each role\n                ((_b = (_a = Object.entries(roles)\n                    // Filter out each role that doesn't have an index that matches `index`\n                    .filter(([possibleRole, indexesForPossibleRole]) => indexesForPossibleRole.includes(index))) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b[0]) || defaultRole });\n        });\n    }\n    // Fallback\n    return [];\n}\n","<script lang=\"ts\">\n  import type { AppModeType } from \"./types/App.types\";\n  import Options from \"./components/Options.svelte\";\n  import Reveal from \"./components/Reveal.svelte\";\n\n  let mode: AppModeType = \"options\";\n</script>\n\n<style>\n  :global(html),\n  :global(body) {\n    position: relative;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n  main {\n    height: 100%;\n  }\n  main :global(*) {\n    color: white;\n\n    font-family: \"In your face, Joffrey!\", cursive;\n    font-size: 48px;\n  }\n</style>\n\n<main>\n  {#if mode === 'options'}\n    <Options\n      on:submit={() => {\n        mode = 'reveal';\n      }} />\n  {:else}\n    <Reveal\n      on:finished={() => {\n        mode = 'options';\n      }} />\n  {/if}\n</main>\n","import App from \"./App.svelte\";\nconst app = new App({\n    target: document.body,\n});\nexport default app;\n"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","get_slot_context","definition","ctx","$$scope","slice","update_slot","slot","slot_definition","dirty","get_slot_changes_fn","get_slot_context_fn","slot_changes","lets","undefined","merged","len","Math","max","length","i","get_slot_changes","slot_context","p","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","createEventDispatcher","type","detail","e","createEvent","initCustomEvent","custom_event","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","outro_and_destroy_block","lookup","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","$$props","obj","$$set","keys","colors","randomColor","getRandom","arr","n","result","taken","RangeError","x","floor","random","range","start","end","y","z","stars","_","sort","floaters","t","frame","loop","requestAnimationFrame","star","floater","cancelAnimationFrame","playSound","sound","Audio","play","slot_ctx","small","noOutline","center","bottomRight","smallCursive","zIndex","goToInstructions","goToPlayerEditor","dispatch","subscriber_queue","optionsStore","stop","subscribers","set","new_value","run_queue","s","invalidate","subscriber","writable","players","color","gameMode","updateColor","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","old_indexes","new_blocks","new_lookup","deltas","child_ctx","get","abs","will_move","did_move","first","new_block","old_block","new_key","old_key","removePlayer","playerIndex","$optionsStore","old","updatePlayerColor","getAllUnusedColors","getNextUnusedColor","unusedColorsIncludingStart","player","includes","_a","submit","optionsScreen","toUpperCase","role","others","othersXMap","currentScreen","numImpostors","levels","updates","to_null_out","accounted_for","spread_props","playersWithRoles","mode","defaultRole","roles","numImposters","impostor","_b","entries","possibleRole","indexesForPossibleRole","assignRoles","currentPlayerRevealing","body"],"mappings":"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"}