{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ColorChooser.svelte",
    "HomeScreen.svelte",
    "Instructions.svelte",
    "Options.svelte",
    "PlayerEditor.svelte",
    "PlayerEditorPage.svelte",
    "Reveal.svelte",
    "RevealSinglePlayer.svelte",
    "StarryBackground.svelte",
    "Button.svelte",
    "Input.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">;\nimport Options from \"./components/Options.svelte\";\nimport Reveal from \"./components/Reveal.svelte\";\nlet mode = \"options\";\n</script>\n\n<style>\n  :global(html),\n  :global(body) {\n    position: relative;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n  main {\n    height: 100%;\n  }\n  main :global(*) {\n    color: white;\n\n    font-family: \"In your face, Joffrey!\", cursive;\n    font-size: 48px;\n  }\n</style>\n\n<main>\n  {#if mode === 'options'}\n    <Options\n      on:submit={() => {\n        mode = 'reveal';\n      }} />\n  {:else}\n    <Reveal\n      on:finished={() => {\n        mode = 'options';\n      }} />\n  {/if}\n</main>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\nimport { colors } from \"../.../../utils\";\nconst dispatch = createEventDispatcher();\nexport let color = 0;\nfunction updateColor() {\n    dispatch(\"updateColor\");\n}\n</script>\n\n<style>\n  button.color-chooser {\n    height: 42px;\n    width: 42px;\n    border: 1px solid white;\n    border-radius: 5px;\n    background-size: contain;\n    background-color: transparent;\n  }\n  button.color-chooser:hover {\n    cursor: pointer;\n  }\n  button.color-chooser:focus {\n    outline: none;\n    border-color: green;\n  }\n</style>\n\n<button\n  class=\"color-chooser\"\n  style={`background-image: url(img/players/${colors[color]}.png)`}\n  on:click={() => {\n    updateColor();\n  }} />\n",
    "<script lang=\"ts\">import Button from \"./basicComponents/Button.svelte\";\nexport let goToInstructions;\nexport let goToPlayerEditor;\n</script>\n\n<style>\n  img {\n    height: 70px;\n    width: auto;\n  }\n  header {\n    font-size: 96px;\n  }\n</style>\n\n<div>\n  <header>\n    <img src=\"img/Among Us A.png\" alt=\"Among Us Logo\" />mong Us IRL Roles\n    Assigner\n  </header>\n  <div>I know, not the catchiest name</div>\n  <Button on:click={goToInstructions}>Instructions</Button>\n  <Button on:click={goToPlayerEditor}>Play</Button>\n</div>\n",
    "<script lang=\"ts\">import Button from \"./basicComponents/Button.svelte\";\nimport { createEventDispatcher } from \"svelte\";\nconst dispatch = createEventDispatcher();\nfunction goBackToMain() {\n    dispatch(\"back\");\n}\n</script>\n\n<style>\n  p {\n    margin: 10px;\n  }\n</style>\n\n<h1>TO USE THIS SITE:</h1>\n<div>\n  <p>1. Go to the main screen (refresh page if needed)</p>\n  <p>2. Press the \"PLAY\" button</p>\n  <p>3. Enter the names of each player in each text box</p>\n  <p>\n    4. Click on the smaller characters beside each text box to toggle their\n    color\n  </p>\n  <p>5. Click \"THEN CONTINUE\".</p>\n  <p>\n    6. Have each person use the computer in the order that you entered their\n    names. Each player will click \"REVEAL ROLE\", and then \"NEXT PLAYER\" once\n    they've memorized their role.\n  </p>\n</div>\n\n<Button on:click={goBackToMain}>Back to Main Screen</Button>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\nimport StarryBackground from \"./StarryBackground.svelte\";\nimport HomeScreen from \"./HomeScreen.svelte\";\nimport Instructions from \"./Instructions.svelte\";\nimport PlayerEditorPage from \"./PlayerEditorPage.svelte\";\nconst dispatch = createEventDispatcher();\nlet optionsScreen = \"general\";\nfunction goToMain() {\n    optionsScreen = \"general\";\n}\nfunction goToInstructions() {\n    optionsScreen = \"instructions\";\n}\nfunction goToPlayerEditor() {\n    optionsScreen = \"players\";\n}\nfunction submit() {\n    dispatch(\"submit\");\n}\n</script>\n\n<style>\n  div.main {\n    text-align: center;\n  }\n</style>\n\n<div class=\"main\">\n  <StarryBackground />\n  {#if optionsScreen === 'general'}\n    <HomeScreen {goToInstructions} {goToPlayerEditor} />\n  {:else if optionsScreen === 'instructions'}\n    <Instructions on:back={goToMain} />\n  {:else}\n    <PlayerEditorPage {submit} />\n  {/if}\n</div>\n",
    "<script lang=\"ts\">import { optionsStore } from \"../stores\";\n;\nimport Button from \"./basicComponents/Button.svelte\";\nimport Input from \"./basicComponents/Input.svelte\";\nimport ColorChooser from \"./ColorChooser.svelte\";\nimport { colors, range } from \"../utils\";\nfunction addPlayer() {\n    if ($optionsStore.players.length >= 10) {\n        return;\n    }\n    optionsStore.update((old) => {\n        return Object.assign(Object.assign({}, old), { players: [...old.players, { name: \"\", color: getUnusedColor() || 0 }] });\n    });\n}\nfunction removePlayer(playerIndex) {\n    if ($optionsStore.players.length <= 3) {\n        return;\n    }\n    optionsStore.update((old) => {\n        return Object.assign(Object.assign({}, old), { players: [\n                ...old.players.slice(0, playerIndex),\n                ...old.players.slice(playerIndex + 1),\n            ] });\n    });\n}\nfunction updatePlayerColor(playerIndex) {\n    optionsStore.update((old) => {\n        return Object.assign(Object.assign({}, old), { players: [\n                ...old.players.slice(0, playerIndex),\n                Object.assign(Object.assign({}, old.players[playerIndex]), { color: getAllUnusedColors().length > 2\n                        ? getNextUnusedColor(old.players[playerIndex].color)\n                        : old.players[playerIndex].color }),\n                ...old.players.slice(playerIndex + 1),\n            ] });\n    });\n}\nfunction getUnusedColor() {\n    var _a;\n    return ((_a = getAllUnusedColors()) === null || _a === void 0 ? void 0 : _a[0]) || 0;\n}\nfunction getNextUnusedColor(start) {\n    const unusedColorsIncludingStart = [...getAllUnusedColors(), start].sort((a, b) => a - b);\n    let nextUnusedColor = unusedColorsIncludingStart[(unusedColorsIncludingStart.indexOf(start) + 1) %\n        (unusedColorsIncludingStart.length - 1)];\n    return nextUnusedColor;\n}\nfunction getAllUnusedColors() {\n    return range(0, colors.length).filter((c) => !$optionsStore.players.map((player) => player.color).includes(c));\n}\n</script>\n\n<style>\n  div.row {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  div.row > :global(*) {\n    margin: 5px;\n  }\n  div.col {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n  }\n  div.col > :global(*) {\n    margin-top: 4px;\n  }\n</style>\n\n<div class=\"col\">\n  <Button center smallCursive on:click={addPlayer}>Add Player</Button>\n  {#each $optionsStore.players as player, i (i)}\n    <div class=\"row\">\n      <Input small bind:value={player.name} />\n      <ColorChooser\n        color={player.color}\n        on:updateColor={() => {\n          updatePlayerColor(i);\n        }} />\n      <Button\n        on:click={() => {\n          removePlayer(i);\n        }}\n        noOutline\n        smallCursive>\n        X\n      </Button>\n    </div>\n  {/each}\n</div>\n",
    "<script lang=\"ts\">import PlayerEditor from \"./PlayerEditor.svelte\";\nimport Button from \"./basicComponents/Button.svelte\";\nexport let submit;\n</script>\n\n<style>\n  div.playerEditorPage > :global(*) {\n    margin-bottom: 10px;\n  }\n</style>\n\n<div class=\"playerEditorPage\">\n  <div>Enter the names of each player here:</div>\n  <PlayerEditor />\n  <Button on:click={submit}>Then continue</Button>\n</div>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\nimport { assignRoles } from \"../rolesAssigner\";\nimport { optionsStore } from \"../stores\";\nimport RevealSinglePlayer from \"./RevealSinglePlayer.svelte\";\nlet playersWithRoles = assignRoles($optionsStore.players, \"default\");\nconst dispatch = createEventDispatcher();\nlet mode = \"revealing\";\nlet currentPlayerRevealing = 0;\n$: if (mode === \"postreveal\") {\n    dispatch(\"finished\");\n}\n</script>\n\n<style>\n  div {\n    height: 100%;\n    text-align: center;\n  }\n  div > * {\n    margin-top: 10px;\n  }\n</style>\n\n<div>\n  {#if mode === 'revealing'}\n    <RevealSinglePlayer\n      {...playersWithRoles[currentPlayerRevealing]}\n      others={playersWithRoles.filter((player) => player.color !== playersWithRoles[currentPlayerRevealing].color)}\n      on:finished={() => {\n        if (currentPlayerRevealing >= playersWithRoles.length - 1) {\n          mode = 'postreveal';\n          return;\n        }\n        currentPlayerRevealing++;\n      }} />\n  {:else}\n    <p>Loading...</p>\n  {/if}\n</div>\n",
    "<script lang=\"ts\">/*\nz-indexes:\n1-10: others\n11: Player\n12: Shadow mask\n13: Role and num-impostors, next player button\n*/\nimport { createEventDispatcher } from \"svelte\";\nimport { playSound } from \"../soundPlayer\";\nimport Button from \"./basicComponents/Button.svelte\";\nimport { colors } from \"../utils\";\n;\nexport let name;\nexport let role;\nexport let color;\nexport let others;\n$: numImpostors = others.filter((o) => o.role === \"impostor\").length;\nconst othersXMap = [11, 22, 30, 35, 39];\nconst dispatch = createEventDispatcher();\nlet currentScreen = \"preReveal\";\n$: {\n    if (currentScreen === \"reveal\") {\n        playSound(\"revealSound\");\n    }\n}\nfunction generateCSSForOther(color, index) {\n    return index % 2 === 0\n        ? `\n        top: ${50 - (index / 2 + 1)}%; left: ${50 - othersXMap[index / 2]}%; \n        transform: translateX(-50%) translateY(-50%) scale(${1 - (index / 2 + 1) / 8}); \n        background-image: url(img/players/${colors[color]}.png); \n        filter: brightness(${100 - (index / 2 + 1) * 10}%);\n        z-index: ${10 - index};`\n        : `\n        top: ${50 - (index + 1) / 2}%; left: ${47 + othersXMap[(index + 1) / 2 - 1]}%; \n        transform: translateX(-50%) translateY(-50%) scaleX(-1) scale(${1 - (index / 2 + 1) / 8}); \n        background-image: url(img/players/${colors[color]}.png); \n        filter: brightness(${100 - ((index + 1) / 2 - 1) * 10}%);\n        z-index: ${10 - index};`;\n}\nfunction goToReveal() {\n    currentScreen = \"reveal\";\n}\nfunction goToNext() {\n    currentScreen = \"preReveal\";\n    dispatch(\"finished\");\n}\n</script>\n\n<style>\n  div.container {\n    margin: 0px;\n    padding: 0px;\n  }\n  div.shadow-mask {\n    position: absolute;\n    z-index: 12;\n    width: 100vw;\n    height: 100vh;\n    background: linear-gradient(\n        to right,\n        rgba(0, 0, 0, 0.8),\n        transparent,\n        rgba(0, 0, 0, 0.8)\n      )\n      no-repeat border-box;\n  }\n  div.reveal {\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-direction: column;\n    background: linear-gradient(black 35%, rgb(56, 255, 233), black 65%)\n      no-repeat border-box;\n  }\n  div.reveal.impostor {\n    background: linear-gradient(black 40%, rgb(173, 0, 0), black 60%) no-repeat\n      border-box;\n  }\n  div.role {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    font-family: \"VCR OSD Mono\";\n    font-size: 124px;\n    z-index: 13;\n  }\n\n  .num-impostors {\n    position: absolute;\n    top: 25%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    font-size: 32px;\n    font-family: \"VCR OSD Mono\", monospace;\n    z-index: 13;\n  }\n\n  .impostor {\n    font-family: \"VCR OSD MONO\";\n    color: red;\n  }\n  .crewmate {\n    font-family: \"VCR OSD MONO\";\n    color: #8dfdff;\n  }\n  .player {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n\n    z-index: 11;\n\n    background-size: contain;\n    width: 250px;\n    height: 250px;\n  }\n\n  .other {\n    position: absolute;\n    background-size: contain;\n    width: 250px;\n    height: 250px;\n  }\n\n  .name {\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    font-size: 24px;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n</style>\n\n<div class=\"container\">\n  {#if currentScreen === 'preReveal'}\n    <div>\n      {#if name}Hello, {name}!{:else}Hello!{/if}\n    </div>\n    <Button on:click={goToReveal}>Reveal Role</Button>\n  {:else if currentScreen === 'reveal'}\n    <div class=\"shadow-mask\" />\n    <div class=\"reveal {role}\">\n      <div class=\"role {role}\">\n        {role.slice(0, 1).toUpperCase() + role.slice(1)}\n      </div>\n      {#if role !== 'impostor'}\n        <div class=\"num-impostors\">\n          There\n          {#if numImpostors > 1}\n            are\n            <span class=\"impostor\">{numImpostors} impostors</span>\n          {:else}is <span class=\"impostor\">{numImpostors} impostor</span>{/if}\n          among us\n        </div>\n      {/if}\n      <div\n        class=\"player\"\n        style=\"background-image: url(img/players/{colors[color]}.png)\">\n        <span class=\"name\"> {name || 'You'} </span>\n      </div>\n      {#if role !== 'impostor'}\n        {#each others as other, i}\n          <div class=\"other\" style={generateCSSForOther(other.color, i)} />\n        {/each}\n      {:else}\n        {#each others.filter((o) => o.role === 'impostor') as imp, i}\n          <div class=\"other\" style={generateCSSForOther(imp.color, i)}>\n            <span class=\"name\">{imp.name || ''}</span>\n          </div>\n        {/each}\n      {/if}\n    </div>\n    <Button zIndex={13} bottomRight on:click={goToNext}>Next player</Button>\n  {/if}\n</div>\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\nimport { randomColor } from \"../utils\";\nlet stars = new Array(100)\n    .fill({ x: 0, y: 0, z: 0 })\n    .map((_, i) => {\n    return {\n        x: Math.random() * 200 - 100,\n        y: Math.random() * 100,\n        z: 0.1 + Math.random() * 1,\n    };\n})\n    .sort((a, b) => a.z - b.z);\nlet floaters = new Array(10)\n    .fill({ x: 0, y: 0, z: 0, r: 0, t: 0, c: \"\" })\n    .map(() => {\n    return {\n        x: Math.random() * 200 - 100,\n        y: Math.random() * 100,\n        z: Math.random() * 2 + 0.1,\n        r: Math.random() * 360 - 180,\n        t: Math.random() * 90 - 45,\n        c: randomColor(),\n    };\n})\n    .sort((a, b) => a.z - b.z);\nonMount(() => {\n    let frame;\n    function loop() {\n        frame = requestAnimationFrame(loop);\n        stars = stars.map((star) => {\n            star.x += 0.6 * star.z;\n            if (star.x > 120)\n                star.x = -20;\n            return star;\n        });\n        floaters = floaters.map((floater) => {\n            floater.x += 0.2 * floater.z;\n            floater.r += 0.1 * floater.t;\n            if (floater.x > 120) {\n                floater = Object.assign(Object.assign({}, floater), { x: -20, y: Math.random() * 100, r: Math.random() * 360 - 180, t: Math.random() * 90 - 45, c: randomColor() });\n            }\n            return floater;\n        });\n    }\n    loop();\n    return () => cancelAnimationFrame(frame);\n});\n</script>\n\n<style>\n  :global(body) {\n    background-color: black;\n  }\n  div.background {\n    position: absolute;\n    left: 0px;\n    top: 0px;\n    z-index: -100;\n    background-color: black;\n    width: 100vw;\n    height: 100vh;\n  }\n  span {\n    position: absolute;\n  }\n  span.floater {\n    display: block;\n    width: 100px;\n    height: 100px;\n  }\n</style>\n\n<div class=\"background\">\n  <div class=\"stars\">\n    {#each stars as star}\n      <span style=\"left: {star.x}%; top: {star.y}%; transform: scale({star.z})\">\n        <svg width=\"10\" height=\"10\">\n          <circle cx=\"5\" cy=\"5\" r=\"4\" stroke=\"white\" fill=\"white\" />\n        </svg>\n      </span>\n    {/each}\n  </div>\n  <div class=\"floaters\">\n    {#each floaters as floater}\n      <span\n        class=\"floater\"\n        style=\"\n  left: {floater.x}%;\n  top: {floater.y}%;\n  transform: scale({floater.z}) rotate({floater.r}deg);\n  background-image: url(img/players/{floater.c}.png);\n  background-size: contain;\n  \" />\n    {/each}\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { playSound } from \"../../soundPlayer\";\nexport let small = false;\nexport let noOutline = false;\nexport let center = false;\nexport let bottomRight = false;\nexport let smallCursive = false;\nexport let zIndex = 0;\n</script>\n\n<style>\n  button {\n    font-family: \"In your face, Joffrey!\", sans-serif;\n    font-size: 74px;\n    background: black;\n    border-radius: 5px;\n    border-width: 3px;\n    border-style: solid;\n    border-color: white;\n    cursor: default;\n    width: fit-content;\n  }\n  button:focus {\n    outline: none;\n    border-color: grey;\n  }\n  button:hover {\n    color: rgb(0, 173, 0);\n    border-color: rgb(0, 173, 0);\n  }\n  button.center {\n    margin: 0 auto;\n  }\n  button.bottom-right {\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n  }\n  button.small {\n    font-size: unset;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n  button.small-cursive {\n    font-size: 32px;\n  }\n  button.small:hover {\n    border-color: white;\n  }\n  button.no-outline {\n    border: none;\n    background-color: transparent;\n  }\n  button.no-outline:hover {\n    color: rgb(0, 173, 0);\n  }\n  button.no-outline:focus {\n    outline: auto;\n  }\n</style>\n\n<button\n  on:click\n  on:mouseenter={() => {\n    playSound('buttonSound');\n  }}\n  class:center\n  class:small\n  class:no-outline={noOutline}\n  class:bottom-right={bottomRight}\n  class:small-cursive={smallCursive}\n  style={`z-index: ${zIndex}`}>\n  <slot />\n</button>\n",
    "<script lang=\"ts\">export let small = false;\nexport let value;\n</script>\n\n<style>\n  input {\n    background: black;\n    border-radius: 5px;\n    border-width: 4px;\n    border-style: double;\n    border-color: white;\n    cursor: default;\n  }\n  input:focus {\n    outline: none;\n    border-color: grey;\n  }\n  input:hover {\n    border-color: rgb(0, 173, 0);\n  }\n  input.small {\n    font-size: 32px;\n  }\n</style>\n\n<input bind:value class:small type=\"text\" />\n"
  ],
  "names": [],
  "mappings": "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"
}